---
title: "Forest to TWS JDI Data Exploration"
format: html
editor: visual
---

# Aims

This document outlines data exploration steps of the data used to model temporal turnover in land cover cells undergoing the Forest to Transitional Woodland Shrub transition.

```{r libraries}
#| label: packages
#| echo: false
#| include: false
library(here)
source(here("scripts", "0_setup.R"))
```

# All GBIF Occurrences

```{r data preparation}
#| label: data-prep
#| include: false

# Load Turnover data
load(here("data", "derived_data",
          "all_periods_turnover_all_land_cover_chanegs_15km.rda"))

# Select only columns for Forest -> TWS model
turnover_forest_tws_15km <- all_periods_turnover_all_land_cover_chanegs_15km |>
  select(-c('2000-2006_TWS no change', '2000-2006_TWS to Forest',
            '2000-2006_Urban_no_change', '2000-2006_all_to_urban',
            '2006-2012_TWS no change', '2006-2012_TWS to Forest',
            '2006-2012_Urban_no_change', '2006-2012_all_to_urban',
            '2012-2018_TWS no change', '2012-2018_TWS to Forest',
            '2012-2018_Urban_no_change', '2012-2018_all_to_urban')) |>
  # determine which rows belong to which time period
  mutate(forest_no_change = case_when(lc_time_period == "2000-2006" ~ `2000-2006_Forest no change`,
                                      lc_time_period == "2006-2012" ~ `2006-2012_Forest no change`,
                                      lc_time_period == "2012-2018" ~ `2012-2018_Forest no change`,
                                      TRUE ~ NA_real_),
         forest_to_tws = case_when(lc_time_period == "2000-2006" ~ `2000-2006_Forest to TWS`,
                                   lc_time_period == "2006-2012" ~ `2006-2012_Forest to TWS`,
                                   lc_time_period == "2012-2018" ~ `2012-2018_Forest to TWS`,
                                   TRUE ~ NA_real_)) |>
  # remove columns no longer required
  select(-`2000-2006_Forest no change`, -`2006-2012_Forest no change`, 
         -`2012-2018_Forest no change`,-`2000-2006_Forest to TWS`, 
         -`2006-2012_Forest to TWS`, -`2012-2018_Forest to TWS`)

# Transform JDI values for beta regression 

# Get N
N <- nrow(turnover_forest_tws_15km)

# Calculate new JDI values
turnover_forest_tws_15km <- turnover_forest_tws_15km |>
  mutate(JDI_beta = (JDI * (N - 1) + 0.5) / N)

```

## Summary Statistics

```{r summary stats}
#| label: summary-stats
#| echo: false

# Extract summary data
summary_by_period <- turnover_forest_tws_15km |>
  group_by(lc_time_period) |>
  summarize(n_observations = n(),
            mean_JDI = mean(JDI, na.rm = TRUE),
            sd_JDI = sd(JDI, na.rm = TRUE),
            mean_forest_to_tws = mean(forest_to_tws, na.rm = TRUE),
            sd_forest_to_tws = sd(forest_to_tws, na.rm = TRUE),
            mean_forest_no_change = mean(forest_no_change, na.rm = TRUE),
            sd_forest_no_change = sd(forest_no_change, na.rm = TRUE),
            mean_delta_recorder_effort = mean(delta_recorder_effort, na.rm = TRUE),
            mean_recorder_effort = mean(recorder_effort, na.rm = TRUE))

# Create table for period summary
summary_period_table <- summary_by_period |>
  kbl(caption = "Table 1: Summary Statistics by Time Period",
      digits = 3,
      align = c("l", rep("r", ncol(summary_by_period)-1))) |>
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
                full_width = TRUE) |>
  column_spec(1, bold = TRUE) |>
  row_spec(0, bold = TRUE, background = "#E6F0FF") |>
  add_header_above(c(" " = 1, 
                     "Sample" = 1,
                     "Turnover" = 2, 
                     "Forest to TWS" = 2,
                     "Forest No Change" = 2,
                     "Recorder Effort" = 2))

# Print the table
summary_period_table

```

## Distribution of Variables

Firstly, we look at the distribution of values across each of the response variables used in our model.

```{r variables}
#| label: variables-distributions
#| echo: false

# Jaccard's Dissimilarity Index
jdi_hist <- ggplot(turnover_forest_tws_15km, aes(x = JDI)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "white", alpha = 0.7) +
  facet_wrap(~ lc_time_period) +
  labs(x = "Jaccard Dissimilarity Index",
       y = "Count") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "lightgrey"),
        strip.text = element_text(face = "bold"))

# Forest -> TWS
forest_to_tws_hist <- ggplot(turnover_forest_tws_15km, aes(x = forest_to_tws)) +
  geom_histogram(bins = 30, fill = "brown", color = "white", alpha = 0.7) +
  facet_wrap(~ lc_time_period) +
  labs(x = "Forest to TWS Transition (pixel count)",
       y = "Count") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "lightgrey"),
        strip.text = element_text(face = "bold"))

# Forest No Change
forest_no_change_hist <- ggplot(turnover_forest_tws_15km, aes(x = forest_no_change)) +
  geom_histogram(bins = 30, fill = "darkgreen", color = "white", alpha = 0.7) +
  facet_wrap(~ lc_time_period) +
  labs(x = "Forest No Change (pixel count)",
       y = "Count") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "lightgrey"),
        strip.text = element_text(face = "bold"))

# Recorder effort
recorder_effort_plot <- ggplot(turnover_forest_tws_15km, aes(x = recorder_effort)) +
  geom_histogram(bins = 30, fill = "orange", color = "white", alpha = 0.7) +
  facet_wrap(~ lc_time_period) +
  labs(x = "Recorder Effort",
       y = "Count") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "lightgrey"),
        strip.text = element_text(face = "bold"))

# Delta recorder effort
delta_recorder_effort_plot <- ggplot(turnover_forest_tws_15km, aes(x = delta_recorder_effort)) +
  geom_histogram(bins = 30, fill = "coral", color = "white", alpha = 0.7) +
  facet_wrap(~ lc_time_period) +
  labs(x = "Delta Recorder Effort",
       y = "Count") +
  theme_classic() +
  theme(strip.background = element_rect(fill = "lightgrey"),
        strip.text = element_text(face = "bold"))

# Combine plots
plots <- plot_grid(jdi_hist, forest_to_tws_hist, forest_no_change_hist, recorder_effort_plot, delta_recorder_effort_plot, ncol = 2, labels = c("a)", "b)", "c)", "d)", "e)"))

# Print plots
plots
```

## Correlation Matrix

Then, we will also check the correlation between the variables used in the analysis.

```{r variable relationships}
#| label: variables-relationships
#| echo: false

# Correlation matrix for numeric variables
numeric_vars <- turnover_forest_tws_15km |>
  select(JDI, forest_to_tws, forest_no_change, 
         intersection_size, union_size, 
         total_spp_before, total_spp_after,
         total_occ_before, total_occ_after,
         recorder_effort, delta_recorder_effort)

# Calculate correlation matrix
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")

# Create correlation plot
cor_plot <- corrplot(cor_matrix, 
                     method = "circle", 
                     type = "upper", 
                     tl.col = "black", 
                     tl.srt = 45, 
                     addCoef.col = "black", 
                     number.cex = 0.7,
                     diag = FALSE)
```

Fortunately, we see no concerningly large correlations between variables used in the analysis.

## Outliers

Data exploration revealed that the data contains some large outliers.

```{r outlier summary}
#| label: outlier-summary
#| echo: false

# Load the forest -> TWS raster for spatial reference
clc_status_15km_forest_tws_masked <- rast(here("data", "derived_data", 
                                               "clc_status_15km_forest_tws_masked.tif"))

# 1. IDENTIFY OUTLIERS ---------------------------------------------------------

# Calculate quartiles and IQR for forest_to_tws
q1_forest <- quantile(turnover_forest_tws_15km$forest_to_tws, 0.25, na.rm = TRUE)
q3_forest <- quantile(turnover_forest_tws_15km$forest_to_tws, 0.75, na.rm = TRUE)
iqr_forest <- q3_forest - q1_forest
upper_forest <- q3_forest + 1.5 * iqr_forest
lower_forest <- q1_forest - 1.5 * iqr_forest

# Calculate quartiles and IQR for recorder_effort
q1_effort <- quantile(turnover_forest_tws_15km$recorder_effort, 0.25, na.rm = TRUE)
q3_effort <- quantile(turnover_forest_tws_15km$recorder_effort, 0.75, na.rm = TRUE)
iqr_effort <- q3_effort - q1_effort
upper_effort <- q3_effort + 1.5 * iqr_effort
lower_effort <- q1_effort - 1.5 * iqr_effort

# Flag outliers
turnover_forest_tws_15km <- turnover_forest_tws_15km |>
  mutate(forest_outlier = forest_to_tws > upper_forest | forest_to_tws < lower_forest,
         effort_outlier = recorder_effort > upper_effort | recorder_effort < lower_effort,
         any_outlier = forest_outlier | effort_outlier,
         outlier_type = case_when(forest_outlier & effort_outlier ~ "Both",
                                  forest_outlier ~ "Forest->TWS",
                                  effort_outlier ~ "Recorder Effort",
                                  TRUE ~ "None"))

# Print outlier summary
cat("=== OUTLIER SUMMARY ===\n")
cat("Forest->TWS outliers:", sum(turnover_forest_tws_15km$forest_outlier, na.rm = TRUE), "\n")
cat("Recorder Effort outliers:", sum(turnover_forest_tws_15km$effort_outlier, na.rm = TRUE), "\n")
cat("Total cells with any outlier:", sum(turnover_forest_tws_15km$any_outlier, na.rm = TRUE), "\n")
cat("Forest->TWS threshold:", round(upper_forest, 2), "\n")
cat("Recorder Effort threshold:", round(upper_effort, 2), "\n")
```

```{r outlier interactive map}
#| label: outlier-map
#| echo: false

# 2. CONVERT TO SPATIAL DATA ---------------------------------------------------

# Convert to sf object for mapping
turnover_sf <- st_as_sf(turnover_forest_tws_15km,
                        coords = c("x", "y"),
                        crs = st_crs(clc_status_15km_forest_tws_masked))

# Transform to WGS84 for leaflet
turnover_sf_wgs84 <- st_transform(turnover_sf, crs = 4326)

# 3. CREATE INTERACTIVE MAPS --------------------------------------------------- 

# Create color palette for forest_to_tws
forest_pal <- colorNumeric(palette = viridis::viridis(100),
                           domain = turnover_sf_wgs84$forest_to_tws,
                           na.color = "transparent")

# Create base map
forest_map <- leaflet() |>
  addProviderTiles("CartoDB.Positron") |>
  setView(lng = 10.7522, lat = 64.1, zoom = 5)

# Add each time period as a separate layer group
for(period in unique(turnover_sf_wgs84$lc_time_period)) {
  period_data <- turnover_sf_wgs84[turnover_sf_wgs84$lc_time_period == period, ]
  
  forest_map <- forest_map |>
    addCircleMarkers(data = period_data, group = period, radius = 3,
                     fillColor = ~forest_pal(forest_to_tws),
                     color = "white", weight = 0.5, opacity = 1,
                     fillOpacity = 0.8, 
                     popup = ~paste0("<b>Cell ID:</b> ", cell_ID, "<br>",
                                     "<b>Period:</b> ", lc_time_period, "<br>",
                                     "<b>Forest->TWS:</b> ", round(forest_to_tws, 2), "<br>",
                                     "<b>Recorder Effort:</b> ", recorder_effort, "<br>",
                                     "<b>JDI:</b> ", round(JDI, 3), "<br>",
                                     "<b>Outlier Type:</b> ", outlier_type),
                     label = ~paste0("Forest->TWS: ", round(forest_to_tws, 2), " (", lc_time_period, ")"))
}

# Add layer control and legend
forest_map <- forest_map |>
  addLayersControl(overlayGroups = unique(turnover_sf_wgs84$lc_time_period),
                   options = layersControlOptions(collapsed = FALSE)) |>
  addLegend(pal = forest_pal, values = turnover_sf_wgs84$forest_to_tws,
            title = "Forest -> TWS<br>(100m pixels)",position = "bottomright")

# Create colour pallete for recorder effort
effort_pal <- colorNumeric(palette = viridis::plasma(100),
                           domain = turnover_sf_wgs84$recorder_effort,
                           na.color = "transparent")

# Create bse map for recorder effort
effort_map <- leaflet() |>
  addProviderTiles("CartoDB.Positron") |>
  setView(lng = 10.7522, lat = 64.1, zoom = 5)

# Add each time period as a separate layer group
for(period in unique(turnover_sf_wgs84$lc_time_period)) {
  period_data <- turnover_sf_wgs84[turnover_sf_wgs84$lc_time_period == period, ]
  
  effort_map <- effort_map |>
    addCircleMarkers(data = period_data, group = period, radius = 3,
      fillColor = ~effort_pal(recorder_effort), color = "white", weight = 0.5,
      opacity = 1, fillOpacity = 0.8,
      popup = ~paste0("<b>Cell ID:</b> ", cell_ID, "<br>",
                      "<b>Period:</b> ", lc_time_period, "<br>",
                      "<b>Forest->TWS:</b> ", round(forest_to_tws, 2), "<br>",
                      "<b>Recorder Effort:</b> ", recorder_effort, "<br>",
                      "<b>JDI:</b> ", round(JDI, 3), "<br>",
                      "<b>Outlier Type:</b> ", outlier_type),
      label = ~paste0("Recorder Effort: ", recorder_effort, " (", lc_time_period, ")"))
}

# Add layer control and legend to recorder effort map
effort_map <- effort_map |>
  addLayersControl(overlayGroups = unique(turnover_sf_wgs84$lc_time_period),
                   options = layersControlOptions(collapsed = FALSE)) |>
  addLegend(pal = effort_pal,
            values = turnover_sf_wgs84$recorder_effort,
            title = "Recorder Effort<br>(total occurrences)",
            position = "bottomright")

# Outlier Map with outlier type control 
outlier_colors <- c("Forest->TWS" = "red", 
                    "Recorder Effort" = "blue", 
                    "Both" = "purple",
                    "None" = "lightgrey")

# Add base map for outliers
outlier_map <- leaflet() |>
  addProviderTiles("CartoDB.Positron") |>
  setView(lng = 10.7522, lat = 64.1, zoom = 5)


# Add Forest->TWS outliers as one layer
forest_outliers <- turnover_sf_wgs84[turnover_sf_wgs84$forest_outlier == TRUE, ]
outlier_map <- outlier_map |>
  addCircleMarkers(data = forest_outliers,
                   group = "Forest->TWS Outliers",
                   fillColor = "red",
                   color = "white",
                   weight = 0.5,
                   opacity = 1,
                   fillOpacity = 0.9,
                   popup = ~paste0("<b>Cell ID:</b> ", cell_ID, "<br>",
                                   "<b>Period:</b> ", lc_time_period, "<br>",
                                   "<b>Forest->TWS:</b> ", round(forest_to_tws, 2), "<br>",
                                   "<b>Recorder Effort:</b> ", recorder_effort, "<br>",
                                   "<b>JDI:</b> ", round(JDI, 3), "<br>",
                                   "<b>Outlier Type:</b> ", outlier_type, "<br>",
                                   "<b>SSB ID:</b> ", ssb_id),
                   label = ~paste0("Forest->TWS Outlier: ", round(forest_to_tws, 2), " (", lc_time_period, ")"))

# Add Recorder Effort outliers as another layer
effort_outliers <- turnover_sf_wgs84[turnover_sf_wgs84$effort_outlier == TRUE, ]
outlier_map <- outlier_map |>
  addCircleMarkers(data = effort_outliers, group = "Recorder Effort Outliers",
                   radius = 5, fillColor = "blue", color = "white", weight = 0.5,
                   opacity = 1, fillOpacity = 0.9,
                   popup = ~paste0("<b>Cell ID:</b> ", cell_ID, "<br>",
                                   "<b>Period:</b> ", lc_time_period, "<br>",
                                   "<b>Forest->TWS:</b> ", round(forest_to_tws, 2), "<br>",
                                   "<b>Recorder Effort:</b> ", recorder_effort, "<br>",
                                   "<b>JDI:</b> ", round(JDI, 3), "<br>",
                                   "<b>Outlier Type:</b> ", outlier_type, "<br>",
                                   "<b>SSB ID:</b> ", ssb_id),
                   label = ~paste0("Recorder Effort Outlier: ", recorder_effort, " (", lc_time_period, ")"))

# Add cells with both types of outliers
both_outliers <- turnover_sf_wgs84[turnover_sf_wgs84$outlier_type == "Both", ]
outlier_map <- outlier_map |>
  addCircleMarkers(data = both_outliers, group = "Both Types", radius = 6,
                   fillColor = "purple", color = "white", weight = 0.5,
                   opacity = 1, fillOpacity = 0.9,
                   popup = ~paste0("<b>Cell ID:</b> ", cell_ID, "<br>",
                                   "<b>Period:</b> ", lc_time_period, "<br>",
                                   "<b>Forest->TWS:</b> ", round(forest_to_tws, 2), "<br>",
                                   "<b>Recorder Effort:</b> ", recorder_effort, "<br>",
                                   "<b>JDI:</b> ", round(JDI, 3), "<br>",
                                   "<b>Outlier Type:</b> ", outlier_type, "<br>",
                                   "<b>SSB ID:</b> ", ssb_id),
                   label = ~paste0("Both Outliers (", lc_time_period, ")"))

# Add non-outliers as a background layer (optional, lighter/smaller)
non_outliers <- turnover_sf_wgs84[turnover_sf_wgs84$any_outlier == FALSE, ]
outlier_map <- outlier_map |>
  addCircleMarkers(data = non_outliers, group = "Non-outliers", radius = 1.5,
                   fillColor = "lightgrey", color = "white", weight = 0.3,
                   opacity = 0.7, fillOpacity = 0.3, 
                   popup = ~paste0("<b>Cell ID:</b> ", cell_ID, "<br>",
                                   "<b>Period:</b> ", lc_time_period, "<br>",
                                   "<b>Forest->TWS:</b> ", round(forest_to_tws, 2), "<br>",
                                   "<b>Recorder Effort:</b> ", recorder_effort, "<br>",
                                   "<b>JDI:</b> ", round(JDI, 3), "<br>",
                                   "<b>Outlier Type:</b> ", outlier_type, "<br>",
                                   "<b>SSB ID:</b> ", ssb_id),
                   label = ~paste0("Normal cell (", lc_time_period, ")"))

# Add layer controls for outlier types
outlier_type_map <- outlier_map |>
  addLayersControl(overlayGroups = c("Forest->TWS Outliers", "Recorder Effort Outliers", 
                      "Both Types", "Non-outliers"),
                   options = layersControlOptions(collapsed = FALSE)) |>
  addLegend(colors = c("red", "blue", "purple", "lightgrey"),
            labels = c("Forest->TWS Outliers", "Recorder Effort Outliers", 
               "Both Types", "Non-outliers"),
            title = "Outlier Categories",
            position = "bottomright")

# Print map
outlier_type_map
```

```{r outlier table}
#| label: outlier-table
#| echo: false

# 6. CREATE OUTLIER DATA TABLE ------------------------------------------------

# Create a detailed table of outliers
outlier_table <- turnover_forest_tws_15km |>
  filter(any_outlier) |>
  select(cell_ID, lc_time_period, forest_to_tws, recorder_effort, JDI, 
         outlier_type, ssb_id, x, y) |>
  arrange(desc(forest_to_tws))

# Display interactive table 
DT::datatable(outlier_table, 
              options = list(pageLength = 20, scrollX = TRUE),
              caption = "Outlier Cells Summary") |>
  DT::formatRound(columns = c("forest_to_tws", "JDI", "x", "y"), digits = 3)

```

```{r top outliers}
#| label: top-outlier
#| echo: false

# 7. PRINT TOP OUTLIERS -------------------------------------------------------

# Top 10 Forest -> TWS Outliers
top_forest_outliers <- turnover_forest_tws_15km |>
  filter(forest_outlier) |>
  arrange(desc(forest_to_tws)) |>
  slice_head(n = 10) |>
  select(cell_ID, lc_time_period, forest_to_tws, recorder_effort, JDI)

knitr::kable(top_forest_outliers, 
             caption = "Top 10 Forest->TWS Outliers",
             digits = 3)

# Top 10 Recorder Effort Outliers
top_effort_outliers <- turnover_forest_tws_15km |>
  filter(effort_outlier) |>
  arrange(desc(recorder_effort)) |>
  slice_head(n = 10) |>
  select(cell_ID, lc_time_period, forest_to_tws, recorder_effort, JDI)

knitr::kable(top_effort_outliers,
             caption = "Top 10 Recorder Effort Outliers", 
             digits = 3)
```
