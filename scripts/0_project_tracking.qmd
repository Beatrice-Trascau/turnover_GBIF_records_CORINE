---
title: "Paper 2: CLC Land Cover Changes and Turnover of GBIF Records"
format: html
editor: visual
---

```{r packages}
#| label: packages
#| echo: false
#| include: false
library(here)
library(kableExtra)
library(knitr)
```

# Project Overview

## Objective

The main objective of the project is to understand the effect of land cover changes on rates of temporal turnover in time and space.

### Research Questions:

1.  Do land cover changes impact rates of temporal turnover?

2.  Do land cover changes impact the taxonomic composition of species assemblages?

3.  Do signals of change (temporal turnover) differ based on the spatial resolution used for analysis?

## File Structure

-   0_setup: Sets up all the packages and functions needed for the project

-   1.1_CORINE_layers_preparation: load and prepare CORINE layers for further analysis

-   1.2_CORINE_aggregation: aggregate original rasters to 15km

-   1.3_CORINE_exploration: get summary statistics for land cover transitions

-   1.4_CORINE_edge_pixel_exploration: identify pixels outside of Norway boundary and remove them from raster

-   2.1_GBIF_import: import and download GBIF occurrences

-   2.2_GBIF_data_cleaning: clean the downloaded occurrences

-   2.3_GBIF_taxonomic_composition: explores taxonomic composition of occurrence records through time

-   3.1_turnover_land_cover: calculate temporal turnover

# Analysis Log

# Before & After Periods

| LC Time Period | Before    | After     |
|----------------|-----------|-----------|
| 2000-2006      | 1997-2000 | 2006-2012 |
| 2006-2012      | 2003-2006 | 2012-2015 |
| 2012-2018      | 2008-2012 | 2015-2018 |

: Before & After periods for each LC time period

## Layer Aggregation (1.2)

**Updated 10.02.2025**

Aim: Aggregate original CLC Status layers to 1km, 5km, and 15km grid size.

Method:

-   Initially used function to calculate % change in each land cover category

    -   Did this by counting the number of "small" pixels with that specific land cover category within the "big" pixels

    -   Used the function below:

```{r}
#| label: old-aggregation-function
#| eval: false
#| include: true
calculate_counts <- function(x) {
  # remove NA values before counting
  x <- na.omit(x)
  
  # count occurrences of each land cover category value
  counts <- table(factor(x, levels = c(1, 80, 103, 250, 380, 590, 711)))
  
  # return the counts as a numeric vector
  return(as.numeric(counts))
}
```

Changed 07.02.2025 to use the following functions instead:

```{r}
#| label: new-aggregation-function
#| eval: false
#| include: true

analyse_forest_transition <- function(rast_t1, rast_t2) {
  # Create transition raster
  # 0 = non-forest in t1
  # 1 = forest remained forest
  # 2 = forest converted to TWS
  # 3 = other forest conversion
  
  # Create "dummy" raster with matching spatial characteristics
  transition <- rast_t1
  
  # Give it 0 values to show non-forested areas
  transition[] <- 0
  
  # Identify forest cells in initial layer
  forest_t1 <- rast_t1 == 250
  
  # For forest cells in initial layer, categorize changes:
  transition[forest_t1] <- case_when(
    # Forest remained forest
    rast_t2[forest_t1] == 250 ~ 1,
    # Forest converted to shrubland
    rast_t2[forest_t1] == 590 ~ 2,
    # Forest converted to something else
    TRUE ~ 3
  )
  
  return(transition)
}
```

Used an individual function for each of the three major land cover transitions assessed: Forests -\> Transitional Woodland Shurb, Transitional Woodland Shrub -\> Forests, all other classes -\> Urban.

For the all other classes -\> Urban aggregation, the process was creating individual layer for each conversion. Therefore, the end product, for example all_urban_1km had the following layers:

```         

layer   layer_name
1   2000-2006_Urban no change
2   2000-2006_Forest to urban
3   2000-2006_TWS to urban
4   2000-2006_Complex agriculture to urban
5   2000-2006_Agriculture & vegetation to urban
6   2000-2006_Moors, heathland & grassland to urban
7   2000-2006_Sparse vegetation to urban
8   2000-2006_No urban conversion
9   2006-2012_Urban no change
10  2006-2012_Forest to urban
11  2006-2012_TWS to urban
12  2006-2012_Complex agriculture to urban
13  2006-2012_Agriculture & vegetation to urban
14  2006-2012_Moors, heathland & grassland to urban
15  2006-2012_Sparse vegetation to urban
16  2006-2012_No urban conversion
17  2012-2018_Urban no change
18  2012-2018_Forest to urban
19  2012-2018_TWS to urban
20  2012-2018_Complex agriculture to urban
21  2012-2018_Agriculture & vegetation to urban
22  2012-2018_Moors, heathland & grassland to urban
23  2012-2018_Sparse vegetation to urban
24  2012-2018_No urban conversion
```

However, we are not interested in the specific changes to urban, so I summed all of the layers that are not "Urban no change" or "No urban conversion" for each time period using the loop below

```{r}
#| label: sum_urban_transitions
#| eval: false
#| include: true

# Define list of resolutions
urban_rasters <- list(
  "1km" = all_urban_1km,
  "5km" = all_urban_5km,
  "15km" = all_urban_15km)

# Loop through each resolution
for(res in resolutions) {
  # Load the appropriate raster
  all_urban <- urban_rasters[[res]]
  
  # Create combined urban transitions for each time period
  urban_2000_2006 <- sum(all_urban[[2:7]])    # layers 2-7 for 2000-2006
  urban_2006_2012 <- sum(all_urban[[10:15]])  # layers 10-15 for 2006-2012
  urban_2012_2018 <- sum(all_urban[[18:23]])  # layers 18-23 for 2012-2018
  
  # Combine into a single raster with 3 layers
  all_urban_combined <- c(urban_2000_2006, urban_2006_2012, urban_2012_2018)
  
  # Set names for the layers
  names(all_urban_combined) <- c("2000-2006_all_to_urban", 
                                 "2006-2012_all_to_urban", 
                                 "2012-2018_all_to_urban")
  
  # Save the new raster
  writeRaster(all_urban_combined, 
              filename = here("data", "derived_data", 
                              paste0("clc_status_", res, "_all_urban_combined.tif")),
              overwrite = TRUE)
  
}


```

This leaves us with an urban raster with 3 layers: "2000-2006_all_to_urban", "2006-2012_all_to_urban" and "2012-2018_all_to_urban", which will be much easier to work with.

In the case of the forest_tws\_ and tws_forest_100m we have the following layer names:

```         
layer_number    layer_name
1   2000-2006_Non-forest
2   2000-2006_Forest no change
3   2000-2006_Forest to TWS
4   2000-2006_Other forest conversion
5   2006-2012_Non-forest
6   2006-2012_Forest no change
7   2006-2012_Forest to TWS
8   2006-2012_Other forest conversion
9   2012-2018_Non-forest
10  2012-2018_Forest no change
11  2012-2018_Forest to TWS
12  2012-2018_Other forest conversion


layer_number    layer_name
1   2000-2006_Non-TWS
2   2000-2006_TWS no change
3   2000-2006_TWS to Forest
4   2000-2006_Other TWS conversion
5   2006-2012_Non-TWS
6   2006-2012_TWS no change
7   2006-2012_TWS to Forest
8   2006-2012_Other TWS conversion
9   2012-2018_Non-TWS
10  2012-2018_TWS no change
11  2012-2018_TWS to Forest
12  2012-2018_Other TWS conversion
```

Since we are only interested in 2000-2006_Forest to TWS, 2006-2012_Forest to TWS, 2012-2018_Forest to TWS and 2000-2006_TWS to Forest, 2006-2012_TWS to Forest and 2012-2018_TWS to Forest respectively, these are easy enough to call when we use them with the \[\[\]\] operator. And are all the layers 3, 7, and 11, which is why we use the following code when we use them:

```{r}
#| label: aggregated_layers_used
#| eval: false
#| include: true

# Forest -> TWS
p1_1km <- create_aggregated_panel(forest_tws_1km[[3]], norway, 
                                  "Forest to TWS", "2000-2006", TRUE, TRUE)
p2_1km <- create_aggregated_panel(forest_tws_1km[[7]], norway, 
                                  "Forest to TWS", "2006-2012", FALSE, FALSE)
p3_1km <- create_aggregated_panel(forest_tws_1km[[11]], norway, 
                                  "Forest to TWS", "2012-2018", FALSE, FALSE)

# TWS -> Forest
p4_1km <- create_aggregated_panel(tws_forest_1km[[3]], norway, 
                                  "TWS to Forest", "2000-2006", TRUE, FALSE)
p5_1km <- create_aggregated_panel(tws_forest_1km[[7]], norway, 
                                  "TWS to Forest", "2006-2012", FALSE, FALSE)
p6_1km <- create_aggregated_panel(tws_forest_1km[[11]], norway, 
                                  "TWS to Forest", "2012-2018", FALSE, FALSE)
```

## Identify Pixels \>50% off the coast

Before proceeding with analysis, we need to check which pixels are partially off the coast. It is especially important to remove the 15km x 15km pixels where \>50% of their area is outside of the Norway boundary.

Using the Norway shapefile as the boundary also means that we will exclude 15km x 15km cells where \>50% of the area falls outside of the country, i.e. is in Sweden, Findland, or Russia. However, I don't think there is any way to distinguish between what part of the boundary is coastline and what part of it is a border.

Across, Norway the distribution of the "edge" pixels is as follows:

```{r Figure S1}
#| label: supplementary_figure1
#| fig_cap: "Figure 1: Map of Edge Pixels Across Norway"
#| eval: false

#knitr::include_graphics(here("figures", "SupplementaryFigure1_Edge_Pixels_15km.png"))
```

![](images/SupplementaryFigure1_Edge_Pixels_15km.png){width="515"}

```{r edge pixels summary}
#| lavel: edge-pixels-summary
#| echo: false

# Load summary statistics
load(here("data", "derived_data", "edge_summary_stats_15km.rda"))

# Create table
edge_summary_stats_15km |>
  kbl(caption = "Table 1: Summary of Edge Pixels in 15km Rasters",
      col.names = c("Statistic", "Value"),
      align = c("l", "r")) |>
  kable_styling(bootstrap_options = c("stried", "hover", "condensed"),
                full_width = FALSE) |>
  column_spec(1, bold = TRUE) |>
  column_spec(2, color = "steelblue")
```

The percentages of areas falling outside of the Norway shapefile boundaries, are distributed as seen below:

```{r Figure S2}
#| label: supplementary_figure2
#| fig-cap: "Histogram of % area outside boundary of edge pixels"
#| eval: false

#knitr::include_graphics(here("figures", "SupplementaryFigure2_Edge_Pixels_15km_Histogram.png"))
```

![](images/SupplementaryFigure2_Edge_Pixels_15km_Histogram.png){width="531"}

Data validation revealed that 426 cells were masked, instead of the expected 434. This meant that 8 cells were unaccounted for. Further exploration revealed that the specific 8 cells were already set to NA in the raster layers before the masking.

Further validation also revealed that the masking did not alter the values of the unmasked cells and that the correct cells were masked.

```{r Figure S3}
#| label: supplementary_figure3
#| fig-cap: "Validation of edge pixels"
#| eval: false

#knitr::include_graphics(here("figures", "SupplementaryFigure3_MaskingValidation.png"))
```

![](images/SupplementaryFigure3_MaskingValidation.png){width="498"}

## Turnover Calculation (3.1)

**Updated: 12.02.2025**

Aim: Calculate Jaccard's dissimilarity index for each land cover cell between the "before" and "after" occurrences. Jaccard's dissimilarity index was chosen because it tends to better deal with the lack of absences and biased sampling we often find with GBIF occurrences. Jaccard's index:

$$J(A,B) = \frac{|A \cap B|}{|A \cup B|}$$

Jaccard' distance/dissimilarity index:

$$d_{j} = 1 - \frac{|A \cap B|}{|A \cup B|}$$

Therefore, $d_{j}\in [0,1]$.

$d_{j} = 0$ when $|A \cap B| = 1$, which can only happen if there is total overlap between species in $T_{1}$ (A) and species in $T_{2}$ (B) = i.e. no turnover

$d_{j} = 1$ when $|A \cap B| = 0$, which can only happen if there is 0 overlap between species in $T_{1}$ (A) and species in $T_{2}$ (B) = i.e. complete turnover.

### Classification of occurrences

The first issue I ran into had to do with how the occurrences were classified in the before and after a specific time period. Initially we were using the code below:

```{r}
#| label: initial_occurrence_classification
#| eval: false
#| include: true
clean_occurrences_sf <- occurrences_sf_reprojected |>
  mutate(period = case_when(
    year %in% c(1997:2000) ~ "1997-2000",
    year %in% c(2006:2009) ~ "2006-2009",
    year %in% c(2003:2006) ~ "2003-2006",
    year %in% c(2012:2015) ~ "2012-2015",
    year %in% c(2009:2012) ~ "2009-2012",
    year %in% c(2015:2018) ~ "2015-2018",
    TRUE ~ NA_character_)) |>
  filter(!is.na(period))
```

The problem with this approach however, is that shared years would be overwritten. For example, occurrences with year = 2006 would first be classified as "2006-2009" and then as "2003-2006". Since the occurrences do not overlap (in the 2006 case, in the first classification it would be "after" for the 2000-2006 period and in the second classification it would be "before" for the 2006-2012 period), it's actually ok if the same occurrences are used multiple times. This is why I instead chose to go with a fragmented classification step, as seen below:

```{r}
#| label: new_occurrence_classification
#| eval: false
#| include: true

# Filtering and classification is done step by step to avoid overwriting of
  # years that are shared between periods

# First period (2000-2006 LC change, 1997-2000 = before, 2006-2012 = after)
period1_occurrences <- occurrences_sf_reprojected |>
  filter(year %in% c(1997:2000, 2006:2009)) |>
  mutate(period = case_when(year %in% 1997:2000 ~ "1997-2000",
                            year %in% 2006:2009 ~ "2006-2009"))

# Second period (2006-2012 LC change, 2003-2006 = before, 2012-2015 = after)
period2_occurrences <- occurrences_sf_reprojected |>
  filter(year %in% c(2003:2006, 2012:2015)) |>
  mutate(period = case_when(year %in% 2003:2006 ~ "2003-2006",
                            year %in% 2012:2015 ~ "2012-2015"))

# Third period (2012-2018 LC change, 2008-2012 = before, 2015-2018 = after)
period3_occurrences <- occurrences_sf_reprojected |>
  filter(year %in% c(2008:2012, 2015:2018)) |>
  mutate(period = case_when(year %in% 2008:2012 ~ "2008-2012",
                            year %in% 2015:2018 ~ "2015-2018"))

# Combine all periods
clean_occurrences_sf <- bind_rows(period1_occurrences,
                                  period2_occurrences,
                                  period3_occurrences)

```

### Cell ID extraction

Then, the next problem was that we were extracting cell IDs for the occurrences, then extracting land cover classes for the cell IDs and then adding the land cover values to the occurrence df based on the cell IDs. Switched approaches to instead create a spatial dataframe from the land cover raster and spatial points from the occurrences.

### Function for Turnover Calculation

The old turnover calculation function looked like this:

```{r}
#| label: old_turnover_function
#| eval: false
#| include: true
calculate_jaccard_for_periods <- function(df, start_period, end_period) {
  start_data <- df |>
    filter(period == start_period)
  end_data <- df |>
    filter(period == end_period)
  
  combined_data <- start_data |>
    full_join(end_data, by = "cell", suffix = c("_start", "_end"))
  
  # Extract land cover for start period
  combined_data <- combined_data |>
    mutate(land_cover_start = extract_land_cover(cell, start_period))
  
  jaccard_results <- combined_data |>
    group_by(cell) |>
    summarize(
      species_start = list(unique(species_start)),
      species_end = list(unique(species_end)),
      jaccard_dissimilarity = 1 - length(intersect(species_start[[1]], 
                                                   species_end[[1]])) / length(union(species_start[[1]], 
                                                                                     species_end[[1]])),
      land_cover_start = first(land_cover_start)) |>
    mutate(start_period = start_period, end_period = end_period)
  
  return(jaccard_results)
}

```

I have changed th function to have the following inputs: df, before_period, after_period, change_period. This makes it easier to distinguish between the land cover change periods used and the before and after periods. The function is now also no longer extracting the land cover values, because this is done before, for all cells (and implicitly for all occurrences). The new function is as follows:

```{r}
#| label: new_turnover_function
#| eval: false
#| include: true

calculate_jaccard_for_periods <- function(df, before_period, after_period, change_period) {
  # Get data for before and after periods
  before_data <- df |>
    filter(period == before_period)
  after_data <- df |>
    filter(period == after_period)
  
  # Combine data
  combined_data <- before_data |>
    full_join(after_data, by = "cell", suffix = c("_before", "_after"))
  
  # Calculate Jaccard dissimilarity and species counts
  jaccard_results <- combined_data |>
    group_by(cell) |>
    summarize(
      species_before = list(unique(species_before)),
      species_after = list(unique(species_after)),
      n_species_before = length(unique(species_before)),
      n_species_after = length(unique(species_after)),
      jaccard_dissimilarity = 1 - length(intersect(species_before[[1]], 
                                                species_after[[1]])) / 
                              length(union(species_before[[1]], 
                                       species_after[[1]])),
      .groups = 'drop'
    ) |>
    mutate(
      before_period = before_period,
      after_period = after_period,
      change_period = change_period
    )
  
  return(jaccard_results)
}

```

## Update 14.02.2025

After meeting with supervisors, decided to proceed with turnover calculations only at 15km resolution.

Will also run an exploratory glm: turnover \~ LC_Change + LC_No_Change + $\Delta$recorder_effort + recorder_effort + time_period

However, there are several questions to clarify about this:

1.  Should we include LC_No_Change = i.e. should we have a measure of the % of small pixels in the large pixels that remain forest (for example)?

2.  If so, will there be autocorrelation issues?

3.  Is $\Delta$recorder_effort = recorder_effort(before) - recorder_effort(after)?

4.  Is recoder_effort = total number of occurrences in the before + after period?

5.  Do we run one model separately for each transition (i.e. F -\> TWS, TWS -\> F, All -\> UF)?

## Update 06.03.2025

Changing the model to:

$$
turnover \sim LC_{Change} + LC_{NoChange} + \Delta recorder_{effort} + recorder_{effort} + time_{period} 
$$

where

$$
\Delta recorder_{effort} = \frac{RecorderEffort_{before} - RecorderEffort_{after}}{RecorderEffort_{before} + RecorderEffort_{after}}
$$

recorder effort = ${RecorderEffort_{before} + RecorderEffort_{after}}$

$RecorderEffort_{before}$ = the total number of species occurrence records recorded in a LC cell in the "before" period

$LC_{Change}$ = the % of 0.01$km^{2}$ cells contained in the 225$km^{2}$ cells where the target land cover transition is detected

$LC_{NoChange}$ = the % of 0.01$km^{2}$ cells contained in the 225$km^{2}$ cells where the target land cover is not changing

# Outstanding Issues & Next Steps

## Current Challenges

1.  Change function that calculates turnover

## Planned Improvements

## Further Questions
