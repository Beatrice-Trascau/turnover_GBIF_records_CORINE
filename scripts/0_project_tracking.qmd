---
title: "Paper 2: CLC Land Cover Changes and Turnover of GBIF Records"
format:
  html:
    theme: flatly
    toc: true
    toc-location: left
    css: custom.css
editor: visual
---

```{r packages}
#| label: packages
#| echo: false
#| include: false
library(here)
source(here("scripts", "0_setup.R"))
```

# Project Overview

## Objective

The main objective of the project is to understand the effect of land cover changes on rates of temporal turnover in time and space.

### Research Questions:

1.  Do land cover changes impact rates of temporal turnover?

2.  Do land cover changes impact the taxonomic composition of species assemblages?

3.  Do signals of change (temporal turnover) differ based on the spatial resolution used for analysis?

## File Structure

| Name | Function |
|----|----|
| 0_setup | Sets up all the packages and functions needed for the project |
| 1.1_CORINE_layers_preparation | Loads and prepares CORINE layers for further analysis |
| 1.2_CORINE_aggregation | Aggregates original rasters to 15km |
| 1.3_CORINE_exploration | Gets summary statistics for land cover transitions |
| 1.4_CORINE_edge_pixel_exploration | Identifies pixels outside of Norway boundary and removes them from raster |
| 2.1_GBIF_import | Imports and downloads GBIF occurrences |
| 2.2_GBIF_data_cleaning | Cleans the downloaded occurrences |
| 2.3_GBIF_taxonomic_composition | Explores taxonomic composition of occurrence records through time |
| 3.1_turnover_land_cover | Calculates temporal turnover |

: Table 1: Analysis Script Structure

# Analysis Log

## CORINE Layer Aggregation (1.2)

### Update 10.01.2025

Aim: Aggregate original CLC Status layers to 1km, 5km, and 15km grid size.

Initially used function to calculate % change in each land cover category. I did this by counting the number of "small" pixels with that specific land cover category within the "big" pixels, using the function:

```{r}
#| label: old-aggregation-function
#| eval: false
#| include: true
calculate_counts <- function(x) {
  # remove NA values before counting
  x <- na.omit(x)
  
  # count occurrences of each land cover category value
  counts <- table(factor(x, levels = c(1, 80, 103, 250, 380, 590, 711)))
  
  # return the counts as a numeric vector
  return(as.numeric(counts))
}
```

### Update 07.02.2025

Changed the method to create a dummy raster from the T1 raster, which compares values to T2 raster and gives the cell a value (0,1,2,3) depending on the type of conversion. This creates one layer in the raster for each of the specific transitions. Used function below:

```{r}
#| label: new-aggregation-function
#| eval: false
#| include: true

analyse_forest_transition <- function(rast_t1, rast_t2) {
  # Create transition raster
  # 0 = non-forest in t1
  # 1 = forest remained forest
  # 2 = forest converted to TWS
  # 3 = other forest conversion
  
  # Create "dummy" raster with matching spatial characteristics
  transition <- rast_t1
  
  # Give it 0 values to show non-forested areas
  transition[] <- 0
  
  # Identify forest cells in initial layer
  forest_t1 <- rast_t1 == 250
  
  # For forest cells in initial layer, categorize changes:
  transition[forest_t1] <- case_when(
    # Forest remained forest
    rast_t2[forest_t1] == 250 ~ 1,
    # Forest converted to shrubland
    rast_t2[forest_t1] == 590 ~ 2,
    # Forest converted to something else
    TRUE ~ 3
  )
  
  return(transition)
}
```

Used an individual function for each of the three major land cover transitions assessed: Forests -\> Transitional Woodland Shurb, Transitional Woodland Shrub -\> Forests, all other classes -\> Urban.

For the all other classes -\> Urban aggregation, the process was creating individual layer for each conversion. Therefore, the end product, for example all_urban_1km had layers such as: 2000-2006_Sparse vegetation to urban, 2012-2018_Forest to urban etc.

However, we are not interested in the specific changes to urban, so I summed all of the layers that are not "Urban no change" or "No urban conversion" for each time period using the loop below

```{r}
#| label: sum_urban_transitions
#| eval: false
#| include: true

# Define list of resolutions
urban_rasters <- list(
  "1km" = all_urban_1km,
  "5km" = all_urban_5km,
  "15km" = all_urban_15km)

# Loop through each resolution
for(res in resolutions) {
  # Load the appropriate raster
  all_urban <- urban_rasters[[res]]
  
  # Create combined urban transitions for each time period
  urban_2000_2006 <- sum(all_urban[[2:7]])    # layers 2-7 for 2000-2006
  urban_2006_2012 <- sum(all_urban[[10:15]])  # layers 10-15 for 2006-2012
  urban_2012_2018 <- sum(all_urban[[18:23]])  # layers 18-23 for 2012-2018
  
  # Combine into a single raster with 3 layers
  all_urban_combined <- c(urban_2000_2006, urban_2006_2012, urban_2012_2018)
  
  # Set names for the layers
  names(all_urban_combined) <- c("2000-2006_all_to_urban", 
                                 "2006-2012_all_to_urban", 
                                 "2012-2018_all_to_urban")
  
  # Save the new raster
  writeRaster(all_urban_combined, 
              filename = here("data", "derived_data", 
                              paste0("clc_status_", res, "_all_urban_combined.tif")),
              overwrite = TRUE)
  
}
```

This leaves us with an urban raster with 3 layers: "2000-2006_all_to_urban", "2006-2012_all_to_urban" and "2012-2018_all_to_urban", which will be much easier to work with.

In the case of the forest_tws\_ and tws_forest_100m we have the following layer names:

```{r layer names}
#| echo: false

# Forest -> TWS
forest_tws_15km <- rast(here("data", "derived_data", 
                             "clc_status_15km_forest_tws.tif"))

# TWS -> Forest
tws_forest_15km <- rast(here("data", "derived_data", 
                             "clc_status_15km_tws_forest.tif"))

# Extract layer names
forest_tws_names <- names(forest_tws_15km)
tws_forest_names <- names(tws_forest_15km)

# Create a combined data frame for the table
raster_layers <- data.frame(
  Raster = c(rep("forest_tws_15km", length(forest_tws_names)), 
             rep("tws_forest_15km", length(tws_forest_names))),
  Number = 1:(length(forest_tws_names) + length(tws_forest_names)),
  Layer_name = c(forest_tws_names, tws_forest_names))

# Display the table using kable for better formatting in quarto
kable(raster_layers, caption = "Table 2: Layer names of forest and TWS raster files") |>
  kable_styling(bootstrap_options = c("striped", "hover"), full_width = FALSE)
```

Since we are only interested in 2000-2006_Forest to TWS, 2006-2012_Forest to TWS, 2012-2018_Forest to TWS and 2000-2006_TWS to Forest, 2006-2012_TWS to Forest and 2012-2018_TWS to Forest respectively, these are easy enough to call when we use them with the \[\[\]\] operator. And are all the layers 3, 7, and 11, which is why we use the following code when we use them:

```{r}
#| label: aggregated_layers_used
#| eval: false
#| include: true

# Forest -> TWS
p1_1km <- create_aggregated_panel(forest_tws_1km[[3]], norway, 
                                  "Forest to TWS", "2000-2006", TRUE, TRUE)
p2_1km <- create_aggregated_panel(forest_tws_1km[[7]], norway, 
                                  "Forest to TWS", "2006-2012", FALSE, FALSE)
p3_1km <- create_aggregated_panel(forest_tws_1km[[11]], norway, 
                                  "Forest to TWS", "2012-2018", FALSE, FALSE)

# TWS -> Forest
p4_1km <- create_aggregated_panel(tws_forest_1km[[3]], norway, 
                                  "TWS to Forest", "2000-2006", TRUE, FALSE)
p5_1km <- create_aggregated_panel(tws_forest_1km[[7]], norway, 
                                  "TWS to Forest", "2006-2012", FALSE, FALSE)
p6_1km <- create_aggregated_panel(tws_forest_1km[[11]], norway, 
                                  "TWS to Forest", "2012-2018", FALSE, FALSE)
```

### Update 10.03.2025

Decided to only do analyses at the 15km resolution. Therefore, the aggregation of the other resolutions was removed from scripts.

## Edge Pixels Exploration (1.4)

### Update 10.03.2025

Before proceeding with analysis, we need to check which pixels are partially off the coast. It is especially important to remove the 15km x 15km pixels where \>50% of their area is outside of the Norway boundary.

Using the Norway shapefile as the boundary also means that we will exclude 15km x 15km cells where \>50% of the area falls outside of the country, i.e. is in Sweden, Findland, or Russia. However, I don't think there is any way to distinguish between what part of the boundary is coastline and what part of it is a border.

Across, Norway the distribution of the "edge" pixels is as follows:

```{r Figure S1}
#| label: supplementary_figure1
#| fig_cap: "Figure 1: Map of Edge Pixels Across Norway"
#| eval: false

#knitr::include_graphics(here("figures", "SupplementaryFigure1_Edge_Pixels_15km.png"))
```

![Figure 1. Distribution of edge pixels across Norway.](images/SupplementaryFigure1_Edge_Pixels_15km.png){width="515"}

```{r edge pixels summary}
#| label: edge-pixels-summary
#| echo: false

# Load summary statistics
load(here("data", "derived_data", "edge_summary_stats_15km.rda"))

# Create table
edge_summary_stats_15km |>
  kbl(caption = "Table 3: Summary of Edge Pixels in 15km Rasters",
      col.names = c("Statistic", "Value"),
      align = c("l", "r")) |>
  kable_styling(bootstrap_options = c("stried", "hover", "condensed"),
                full_width = FALSE) |>
  column_spec(1, bold = TRUE) |>
  column_spec(2, color = "steelblue")
```

The percentages of areas falling outside of the Norway shapefile boundaries, are distributed as seen below:

```{r Figure S2}
#| label: supplementary_figure2
#| fig-cap: "Histogram of % area outside boundary of edge pixels"
#| eval: false

#knitr::include_graphics(here("figures", "SupplementaryFigure2_Edge_Pixels_15km_Histogram.png"))
```

![Figure 2. Histogram of % area outside of Norway boundary of edge pixels.](images/SupplementaryFigure2_Edge_Pixels_15km_Histogram.png){width="531"}

Data validation revealed that 426 cells were masked, instead of the expected 434. This meant that 8 cells were unaccounted for. Further exploration revealed that the specific 8 cells were already set to NA in the raster layers before the masking.

Further validation also revealed that the masking did not alter the values of the unmasked cells and that the correct cells were masked.

```{r Figure S3}
#| label: supplementary_figure3
#| fig-cap: "Validation of edge pixels"
#| eval: false

#knitr::include_graphics(here("figures", "SupplementaryFigure3_MaskingValidation.png"))
```

![Figure 3. Validation results of spatial accuracy of masking.](images/SupplementaryFigure3_MaskingValidation.png){width="498"}

## Turnover Calculation (3.1)

### Update 10.02.2025 - Before & After Periods

| LC Time Period | Before    | After     |
|----------------|-----------|-----------|
| 2000-2006      | 1997-2000 | 2006-2009 |
| 2006-2012      | 2003-2006 | 2012-2015 |
| 2012-2018      | 2009-2012 | 2015-2018 |

: Table 4: Before & After periods for each LC time period

### Update 12.02.2025 - Jaccard's Dissimilarity Index

Aim: Calculate Jaccard's dissimilarity index for each land cover cell between the "before" and "after" occurrences. Jaccard's dissimilarity index was chosen because it tends to better deal with the lack of absences and biased sampling we often find with GBIF occurrences. Jaccard's index:

$$J(A,B) = \frac{|A \cap B|}{|A \cup B|}$$

Jaccard' distance/dissimilarity index:

$$d_{j} = 1 - \frac{|A \cap B|}{|A \cup B|}$$

Therefore, $d_{j}\in [0,1]$.

$d_{j} = 0$ when $|A \cap B| = 1$, which can only happen if there is total overlap between species in $T_{1}$ (A) and species in $T_{2}$ (B) = i.e. no turnover

$d_{j} = 1$ when $|A \cap B| = 0$, which can only happen if there is 0 overlap between species in $T_{1}$ (A) and species in $T_{2}$ (B) = i.e. complete turnover.

### Update 13.02.2025 - Classification of occurrences

The first issue I ran into had to do with how the occurrences were classified in the before and after a specific time period. Initially we were using the code below:

```{r}
#| label: initial_occurrence_classification
#| eval: false
#| include: true
clean_occurrences_sf <- occurrences_sf_reprojected |>
  mutate(period = case_when(
    year %in% c(1997:2000) ~ "1997-2000",
    year %in% c(2006:2009) ~ "2006-2009",
    year %in% c(2003:2006) ~ "2003-2006",
    year %in% c(2012:2015) ~ "2012-2015",
    year %in% c(2009:2012) ~ "2009-2012",
    year %in% c(2015:2018) ~ "2015-2018",
    TRUE ~ NA_character_)) |>
  filter(!is.na(period))
```

The problem with this approach however, is that shared years would be overwritten. For example, occurrences with year = 2006 would first be classified as "2006-2009" and then as "2003-2006". Since the occurrences do not overlap (in the 2006 case, in the first classification it would be "after" for the 2000-2006 period and in the second classification it would be "before" for the 2006-2012 period), it's actually ok if the same occurrences are used multiple times. This is why I instead chose to go with a fragmented classification step, as seen below:

```{r}
#| label: new_occurrence_classification
#| eval: false
#| include: true

# Filtering and classification is done step by step to avoid overwriting of
  # years that are shared between periods

# First period (2000-2006 LC change, 1997-2000 = before, 2006-2012 = after)
period1_occurrences <- occurrences_sf_reprojected |>
  filter(year %in% c(1997:2000, 2006:2009)) |>
  mutate(period = case_when(year %in% 1997:2000 ~ "1997-2000",
                            year %in% 2006:2009 ~ "2006-2009"))

# Second period (2006-2012 LC change, 2003-2006 = before, 2012-2015 = after)
period2_occurrences <- occurrences_sf_reprojected |>
  filter(year %in% c(2003:2006, 2012:2015)) |>
  mutate(period = case_when(year %in% 2003:2006 ~ "2003-2006",
                            year %in% 2012:2015 ~ "2012-2015"))

# Third period (2012-2018 LC change, 2008-2012 = before, 2015-2018 = after)
period3_occurrences <- occurrences_sf_reprojected |>
  filter(year %in% c(2008:2012, 2015:2018)) |>
  mutate(period = case_when(year %in% 2008:2012 ~ "2008-2012",
                            year %in% 2015:2018 ~ "2015-2018"))

# Combine all periods
clean_occurrences_sf <- bind_rows(period1_occurrences,
                                  period2_occurrences,
                                  period3_occurrences)

```

### Update 14.02.2025 - Cell ID extraction

Then, the next problem was that we were extracting cell IDs for the occurrences, then extracting land cover classes for the cell IDs and then adding the land cover values to the occurrence df based on the cell IDs. Switched approaches to instead create a spatial dataframe from the land cover raster and spatial points from the occurrences.

### Update 14.02.2025 - Function for Turnover Calculation

The old turnover calculation function looked like this:

```{r}
#| label: old_turnover_function
#| eval: false
#| include: true
calculate_jaccard_for_periods <- function(df, start_period, end_period) {
  start_data <- df |>
    filter(period == start_period)
  end_data <- df |>
    filter(period == end_period)
  
  combined_data <- start_data |>
    full_join(end_data, by = "cell", suffix = c("_start", "_end"))
  
  # Extract land cover for start period
  combined_data <- combined_data |>
    mutate(land_cover_start = extract_land_cover(cell, start_period))
  
  jaccard_results <- combined_data |>
    group_by(cell) |>
    summarize(
      species_start = list(unique(species_start)),
      species_end = list(unique(species_end)),
      jaccard_dissimilarity = 1 - length(intersect(species_start[[1]], 
                                                   species_end[[1]])) / length(union(species_start[[1]], 
                                                                                     species_end[[1]])),
      land_cover_start = first(land_cover_start)) |>
    mutate(start_period = start_period, end_period = end_period)
  
  return(jaccard_results)
}

```

I have changed th function to have the following inputs: df, before_period, after_period, change_period. This makes it easier to distinguish between the land cover change periods used and the before and after periods. The function is now also no longer extracting the land cover values, because this is done before, for all cells (and implicitly for all occurrences). The new function is as follows:

```{r}
#| label: new_turnover_function
#| eval: false
#| include: true

calculate_jaccard_for_periods <- function(df, before_period, after_period, change_period) {
  # Get data for before and after periods
  before_data <- df |>
    filter(period == before_period)
  after_data <- df |>
    filter(period == after_period)
  
  # Combine data
  combined_data <- before_data |>
    full_join(after_data, by = "cell", suffix = c("_before", "_after"))
  
  # Calculate Jaccard dissimilarity and species counts
  jaccard_results <- combined_data |>
    group_by(cell) |>
    summarize(
      species_before = list(unique(species_before)),
      species_after = list(unique(species_after)),
      n_species_before = length(unique(species_before)),
      n_species_after = length(unique(species_after)),
      jaccard_dissimilarity = 1 - length(intersect(species_before[[1]], 
                                                species_after[[1]])) / 
                              length(union(species_before[[1]], 
                                       species_after[[1]])),
      .groups = 'drop'
    ) |>
    mutate(
      before_period = before_period,
      after_period = after_period,
      change_period = change_period
    )
  
  return(jaccard_results)
}
```

### Update 12.03.2025

In the part of the turnover script where a reference grid was created, data validation steps were added to ensure that when assigning cell IDs, the correct amount of NA cells were excluded. Data validation revealed that from the total of 7931 cells in the rasters, 605 of them have an NA value. This is likely due to the masking performed on the edge cells as well as when the original CLC layers were cut to Norway.

In the reference grid created, 7326 cells had non-NA values. This means that the number of cells with non-NA values is the same in the rasters and in the reference grid. We can then assume that the reference grid, and therefore the spatial dataframe created from the CLC layer, contain the correct data for the analysis.

### Update 13.03.2025

The previous method ran into several problems and became too complicated, likely because of the overlapping years in the before-after periods. Devised a new strategy which involves processing each period (2000-2006, 2006-2012, 2012-2018) at at time. For each period, we will do the following steps:

1.  Filter occurrences based on the before and after years

2.  Extract cell IDs for each occurrence

3.  Summarise occurrences by cell ID (and possibly time)

    1.  Here we need to get lists of species and the number of occurrences for before and afer

4.  Extract Land Cover Change and Land Cover No Change from the respective layers of the rasters

5.  Calculate recorder effrot and delta recorder effort

6.  Calculate turnover

7.  Move on to the next period

At the end, we should have a dataframe with the following columns:

| cell_ID | lc_change | lc_no_change | spp_list_before | spp_list_after | total_occ_before | total_occ_after | recorder_effort | delta_recorder_effort | JDI | Time |
|----|----|----|----|----|----|----|----|----|----|----|
| 15678 | 40 | 60 | list() | list() | 467 | 897 | 1364 | 0.315 | 0.65 | 2000-2006 |

At the end, we will combine all 3 dfs into a single one, which will be the one used in the models.

#### Period 1: 2000-2006

Total number of occurrences: 3 336 822. Before = 941 073, After = 2 395 749.

Total number of occurrences assigned to a non-NA grid cell: 2 516 58/3 336 822 (75.42%). Occurrences were assigned to a total of 1454 unique cells (out of the total of 7326 non-NA cells).

#### Period 2: 2006-2012

Total number of occurrences = 7 111 129. Before = 1 281 012, After = 5 830 117.

Total number of occurrences assigned to non-NA grid cell: 5 433 853/7 111 129 (76.41%). Occurrences were assigned to a total of 1448 unique non-NA cells.

#### Period 3: 2012-2018

Total number of occurrences = 11 492 996. Before = 4 847 584, After = 6 645 412.

Total number of occurrences assigned to non-NA grid cells: 9 055 263/11 492 996 (78.79%). Occurrences were assigned to a total of 1462 unique non-NA cells.

# Vascular Plant Turnover Calculation (3.2.)

## Update 30.04.2025

Created new script to calculate the temporal turnover of vascular plants in relation to land cover changes.

From the main occurrence dataframe, I filtered out all records where phylum was not *Tracheophyta*. All other processing and turnover calculation steps remained the same.

# Birds Turnover Calculation (3.3.)

## Update 05.05.2025

Created new script to calculate the temporal turnover of birds in relation to land cover changes.

From the main occurrence dataframe, I filtered out all records where class was not *Aves*. All other processing and turnover calculation steps remained the same.

# Turnover Models (4.1)

## Update 06.03.2025

Changing the model to:

$$
turnover \sim LC_{Change} + LC_{NoChange} + \Delta recorder_{effort} + recorder_{effort} + time_{period} 
$$

where

$$
\Delta recorder_{effort} = \frac{RecorderEffort_{before} - RecorderEffort_{after}}{RecorderEffort_{before} + RecorderEffort_{after}}
$$

recorder effort = ${RecorderEffort_{before} + RecorderEffort_{after}}$

$RecorderEffort_{before}$ = the total number of species occurrence records recorded in a LC cell in the "before" period

$LC_{Change}$ = the % of 0.01$km^{2}$ cells contained in the 225$km^{2}$ cells where the target land cover transition is detected

$LC_{NoChange}$ = the % of 0.01$km^{2}$ cells contained in the 225$km^{2}$ cells where the target land cover is not changing

## Update 14.03.2025

Running one model per land cover transition type, i.e. we will have:

1.  Model 1: Forest -\> TWS

2.  Model 2: TWS -\> Forest

3.  Model 3: All -\> Urban

Since $JDI\in [0,1]$, the models will be run with a $\beta$ distribution. However, since the values touch 0 and 1 and the $\beta$ distribution assumes $JDI\in (0,1)$, the JDI values will be transformed according to the formula:

$$\frac{Y*(N-1)+0.5}{N}$$

where Y = the response variable and N = sample size.

For more details on the use of $\beta$ distribution for (0,1) values, see: Beta regression in R. Cibrari-Neto & Zeileis. Journal of Statistical Software. April 2010, Volume 34, Issue 2.

### Model 1: Forest -\> TWS ($\beta$ GLM)

Model output revealed significant effect of LC Change, LC No Change, $\Delta recorder_{effort}$, $recorder_{effort}$, and the two time periods. Moran's I tests revealed significant spatial autocorrelation between the cells, with 18% of cells having significant local autocorrelation. Here is how that looked distributed across Norway:

![Figure 4. Distribution of Moran's I values for Forest -\> TWS beta GLM](images/SupplementaryFigure4_Local_Moran_I_Forest_TWS_15km-01.png)

### Model 2: TWS -\> Forest ($\beta$ GLM)

Model output revealed significant effect of LC No Change, $\Delta recorder_{effort}$, $recorder_{effort}$, and the two time periods but no effect of LC Change. Moran's I tests revealed significant spatial autocorrelation between the cells, with 17% of cells having significant local autocorrelation. Here is how that looked distributed across Norway:

![Figure 5. Distribution of Moran's I values for TWS -\> Forest beta GLM.](images/SupplementaryFigure5_Local_Moran_I_TWS_Forest_15km-01.png)

### Model 3: All -\> Urban/Artificial Surfaces ($\beta$ GLM)

Model output revealed significant effect of LC Change, LC No Change, $\Delta recorder_{effort}$, $recorder_{effort}$, and the two time periods. Moran's I tests revealed significant spatial autocorrelation between the cells, with 17% of cells having significant local autocorrelation. Here is how that looked distributed across Norway:

![Figure 6. Distribution of Moran's I values for All -\> Urban beta GLM.](images/SupplementaryFigure6_Local_Moran_I_All_Urban_15km-01.png)

## Update 17.03.2025

To determine best course of action regarding data analysis of temporal turnover, especially in light of the significant spatial autocorrelation of residuals detected, we must first follow some data exploration steps.

# Species Loss and Gain (5.1)

## Forest -\> TWS

Calcualted amount of species loss and gain for vascular plants and bird occurrences in Forest -\> TWS.

```{r species change forest tws summary statistics}
#| label: species-loss-gain-forest-tws-summary
#| echo: false
#| message: false
#| warning: false

# Get data
source(here("scripts", "5.1_species_gain_loss_forest_tws.R"))

# Display table
summary_stats |>
  kbl(caption = "Table 4: Summary of Species Gain and Loss in Forest to TWS cells",
      col.names = c("Time Period", "Group", "Species Change", "Count", "Mean Change",
                    "Median Change", "Max Change", "Total Cells", "%"),
      align = c("l", "r")) |>
  kable_styling(bootstrap_options = c("stried", "hover", "condensed"),
                full_width = FALSE) 
```

```{r species change forest tws}
#| label: species-loss-gain-forest-tws
#| fig-cap: "Species loss and gain for vascular plants and birds in Forest to Transitional Woodland Shrub land cover conversions"
#| fig-width: 7
#| fig-height: 6
#| out-width: "100%"
#| echo: false
#| message: false
#| warning: false

# Display figure
gain_loss_forest_tws
```

## TWS -\> Forest

```{r species change tws to forest}
#| label: species-loss-gain-tws-forest-summary
#| echo: false
#| message: false
#| warning: false

# Display table
summary_stats_tws_forest |>
  kbl(caption = "Table 5: Summary of Species Gain and Loss in TWS to Forest cells",
      col.names = c("Time Period", "Group", "Species Change", "Count", "Mean Change",
                    "Median Change", "Max Change", "Total Cells", "%"),
      align = c("l", "r")) |>
  kable_styling(bootstrap_options = c("stried", "hover", "condensed"),
                full_width = FALSE) 
```

```{r species change plotting}
#| label: species-loss-gain-tws-forest
#| fig-cap: "Species loss and gain for vascular plants and birds in Transitional Woodland Shrub to Forest land cover conversions"
#| fig-width: 7
#| fig-height: 6
#| out-width: "100%"
#| echo: false
#| message: false
#| warning: false

# Display figure
gain_loss_tws_forest
```

## All -\> Urban

```{r species change all urban summary}
#| label: species-loss-gain-all-urban-summary
#| echo: false
#| message: false
#| warning: false

# Display table
summary_stats_all_urban |>
  kbl(caption = "Table 6: Summary of Species Gain and Loss in All to Urban cells",
      col.names = c("Time Period", "Group", "Species Change", "Count", "Mean Change",
                    "Median Change", "Max Change", "Total Cells", "%"),
      align = c("l", "r")) |>
  kable_styling(bootstrap_options = c("stried", "hover", "condensed"),
                full_width = FALSE) 
```

```{r species change all urban plotting}
#| label: species-loss-gain-all-urban
#| fig-cap: "Species loss and gain for vascular plants and birds in All to Urban land cover conversions"
#| fig-width: 7
#| fig-height: 6
#| out-width: "100%"
#| echo: false
#| message: false
#| warning: false

# Display figure
gain_loss_all_urban
```

## Species Change & Recorder Effort

```{r species change and recorder effort}
#| label: species-change-recorder-effort
#| fig-cap: "Change in the number of species recorded between two periods in relation to recorder effort in a) Forest to TWS, b) TWS to Forest and c) All to Uurban pixels"
#| fig-width: 7
#| fig-height: 6
#| out-width: "100%"
#| echo: false
#| message: false
#| warning: false

# Display figure
rec_effort
```

# Outstanding Issues & Next Steps

## Current Challenges

## Planned Improvements

-   Figure of the number of occurrences broken down by group through time

-   Additional data exploration steps

-   Add code validation steps for script 3.1

## Further Questions

1.  How do turnover rates break down by major groups (plants, arthropods, birds, mammals)?

2.  What are the ratios of species loss and gain for each group in each time period?

# Preliminary Results

# 1. Land Cover Change

![Figure 7. Distribution of % of grid cell area undergoing Forest to Transitional Woodland Shrub in a) 200-2006, b) 2006-2012, c)2012-2018, Transitional Woodland Shrub to Forest in d) 2000-2006, e) 2006-2012, f) 2012-2018 or conversion to Artificial Surfaces in g) 2000-2006, h) 2006-2012, i) 2012-2018.](images/Figure1_landcover_transitions_15km.png)

## 2. Species Groups in Time Periods

![Figure 8. Proportion of occurrence records belonging to each group in each time period.](images/Figure2_taxonomic_composition_across_periods(1).png)

![Figure 9. Number of occurrences for each group through time.](images/Figure3_occurrences_through_time.png){width="570"}

![Figure 10. Number of occurrences through time broken down by group.](images/Figure4_occurrences_through_time_by_group-01.png)
